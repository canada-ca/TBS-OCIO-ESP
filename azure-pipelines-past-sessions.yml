schedules:
- cron: '0 */6 * * *'
  displayName: Run every 6 hours
  branches:
    include:
    - master  
  always: true

# A pipeline with no CI trigger
trigger: none

pool:
  vmImage: windows-latest

steps:
- task: PowerShell@2
  env:
    # Create bot password from https://wiki.gccollab.ca/Special:BotPasswords
    WIKI_USER: $(WIKI_USER)
    WIKI_PASSWORD: $(WIKI_PASSWORD)
    ADO_TOKEN: $(ADO_TOKEN)
  inputs:
    targetType: 'inline'
    script: |
      $wikiTitle = $env:WIKI_TITLE
      $username = $env:WIKI_USER
      $password = $env:WIKI_PASSWORD
      $pastSessionQuery = 'https://analytics.dev.azure.com/TBS-OCIO-ESP/_odata/v1.0/WorkItems?$select=Title,%20State,%20Custom_Department,%20WorkItemType,%20BacklogPriority&$expand=Iteration($select=IterationPath),%20Links($select=TargetWorkItem;%20$filter=(TargetWorkItem/Project/ProjectName%20eq%20%27gc-earb%27%20AND%20((TargetWorkItem/WorkItemType%20ne%20%27%27%20AND%20TargetWorkItem/State%20ne%20%27Cancelled%27%20AND%20TargetWorkItem/Title%20ne%20%27Opening%20Remarks%27%20AND%20TargetWorkItem/Title%20ne%20%27Closing%20Remarks%27)%20OR%20(TargetWorkItem/State%20eq%20%27Cancelled%27%20AND%20TargetWorkItem/Title%20eq%20%27Opening%20Remarks%27)))%20and%20(LinkTypeReferenceName%20eq%20%27System.LinkTypes.Hierarchy-Forward%27);%20$expand=TargetWorkItem($select=Title,%20State,%20Custom_Department,%20WorkItemType,%20BacklogPriority;%20$expand=Iteration($select=IterationPath)))&$filter=(Project/ProjectName%20eq%20%27gc-earb%27%20AND%20WorkItemType%20eq%20%27Meeting%27%20AND%20(State%20eq%20%27Done%27%20or%20State%20eq%20%27Cancelled%27))%20and%20Links/any(l:%20(l/TargetWorkItem/Project/ProjectName%20eq%20%27gc-earb%27%20AND%20((l/TargetWorkItem/WorkItemType%20ne%20%27%27%20AND%20l/TargetWorkItem/State%20ne%20%27Cancelled%27%20AND%20l/TargetWorkItem/Title%20ne%20%27Opening%20Remarks%27%20AND%20l/TargetWorkItem/Title%20ne%20%27Closing%20Remarks%27)%20OR%20(l/TargetWorkItem/State%20eq%20%27Cancelled%27%20AND%20l/TargetWorkItem/Title%20eq%20%27Opening%20Remarks%27)))%20and%20(l/LinkTypeReferenceName%20eq%20%27System.LinkTypes.Hierarchy-Forward%27))&$orderby=Iteration/IterationPath%20desc,%20BacklogPriority%20asc,%20WorkItemId%20asc';

      function Get-QueryResultsTable($token, $odataQuery)
      {
        if ($null -eq $token) 
        {
            throw('Missing token value')
        }
        if ($null -eq $odataQuery) 
        {
            throw('Missing OData query')
        }
        $authHeader = @{ 'Authorization' = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":" + $token)) }
        $result = Invoke-RestMethod -Method Get -Uri $odataQuery -Headers $authHeader
        $meetings = $result.value
        $wikicontent = "{{OCIO_GCEARB_Header}}`n<multilang>`n"
        $englishcontent = "@en|__NOTOC__`n"
        $frenchcontent = "@fr|__NOTOC__`n"
        $frCulture = New-Object system.globalization.cultureinfo('fr-CA')

        # GCConnex Link
        $englishcontent += "<h3> Records of discussions and GC EARB presentations are posted on the: [https://gcconnex.gc.ca/groups/profile/29755185/gc-enterprise-architecture-review-board-comite-dexamen-de-larchitecture-dentreprise-du-gc?language=en GC Enterprise Architecture Review Board GCconnex page]'''.''' </h3>"
        $frenchcontent += "<h3> Les comptes rendus des discussions et des présentations du CEAI GC sont affichés sur: [https://gcconnex.gc.ca/groups/profile/29755185/gc-enterprise-architecture-review-board-comite-dexamen-de-larchitecture-dentreprise-du-gc?language=fr Comité d’examen de l’architecture intégrée du GC]'''.''' </h3>"

        # Table Start
        $englishcontent += "</h2>`n<table class='wikitable sortable nowrap' style='width:100%'>";
        $frenchcontent += "</h2>`n<table class='wikitable sortable nowrap' style='width:100%'>";

        # Column Headers
        $englishcontent += "`n<tr>`n<th>Date</th>`n<th>Item for Presentation</th>`n<th>Presenter</th>`n<th>Purpose</th>`n</tr>"
        $frenchcontent += "`n<tr>`n<th>Date</th>`n<th>Points présentés</th>`n<th>Présentateur</th>`n<th>Objet</th>`n</tr>"

        foreach($meeting in $meetings)
        {
            $iteration = $meeting.Iteration.IterationPath.Split('\')[1]
            $date = (Get-Date -Date "$iteration").ToString('yyyy/MM/dd')
            $dateFr = (Get-Date -Date "$iteration").ToString('yyyy/MM/dd', $frCulture)
            
            $meetingItems = $meeting.Links.TargetWorkItem | Sort-Object -Property BacklogPriority

            # Go over children
            foreach($meetingItem in $meetingItems)
            {

                # Wrap text in Presenter Column
                if ($null -ne $meetingItem.Custom_Department) {
                    if ($meetingItem.Custom_Department.Contains(';')) {
                        $departments = $meetingItem.Custom_Department.Replace(';', '<br>')
                    } else {
                        $departments = $meetingItem.Custom_Department
                    }
                } else {
                    $departments = ""
                }

                # Cancelled Meeting Entries
                if ($meeting.State -eq 'Cancelled')
                {
                    $englishcontent += "`n<tr>`n<td style='width:10%'>" + $date + "</td>`n<td style='width:70%'>"  + "<span style='color:red;'>MEETING CANCELED</span>" + "</td>`n<td style='width:5%'>" + $departments + "</td>`n<td style='width:15%'>" + $meetingItem.WorkItemType + "</td>`n</tr>"
                    $frenchcontent += "`n<tr>`n<td style='width:10%'>" + $dateFr + "</td>`n<td style='width:70%'>"   + "<span style='color:red;'>RÉUNION ANNULÉE</span>" + "</td>`n<td style='width:5%'>" + $departments+ "</td>`n<td style='width:15%'>" + $meetingItem.WorkItemType + "</td>`n</tr>"
                } 

                # Regular Meeting Entries
                if ($meetingItem.State -eq 'Cancelled')
                {
                    continue
                }
                
                $englishcontent += "`n<tr>`n<td style='width:10%'>" + $date + "</td>`n<td style='width:70%'>"  + $meetingItem.Title + "</td>`n<td style='width:5%'>" + $departments + "</td>`n<td style='width:15%'>" + $meetingItem.WorkItemType + "</td>`n</tr>"
        
            
                if ($meetingItem.WorkItemType -eq 'Endorsement')
                {
                    $purpose = 'Approbation'
                    
                }
                elseif ($meetingItem.WorkItemType -eq 'Consent Item')
                {
                    $purpose = 'Consentement'
                } 
                else
                {
                    $purpose = $meetingItem.WorkItemType
                }
                $frenchcontent += "`n<tr>`n<td style='width:10%'>" + $dateFr + "</td>`n<td style='width:70%'>"  + $meetingItem.Title + "</td>`n<td style='width:5%'>" + $departments + "</td>`n<td style='width:15%'>" + $purpose + "</td>`n</tr>"
            }
        }

        $englishcontent += "`n</table>`n" 
        $frenchcontent += "`n</table>`n"

        $wikicontent += $englishcontent
        $wikicontent += $frenchcontent
        $wikicontent += "`n</multilang>`n"
        return $wikicontent
      }
      
      # Upload to Wiki from https://en.wikiversity.org/wiki/MediaWiki_API/PowerShell
      $protocol = 'https://'
      $wiki = 'wiki.gccollab.ca/'
      $api = 'api.php'
      
      # For old cypher suite compat
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      
      $csrftoken
      $websession
      $wikiversion
      
      function Invoke-Login($username, $password)
      {
          $uri = $protocol + $wiki + $api
      
          $body = @{}
          $body.action = 'login'
          $body.format = 'json'
          $body.lgname = $username
          $body.lgpassword = $password
      
          $object = Invoke-WebRequest $uri -Method Post -Body $body -SessionVariable global:websession
          $json = $object.Content
          $object = ConvertFrom-Json $json
      
          if($object.login.result -eq 'NeedToken')
          {
              $uri = $protocol + $wiki + $api
      
              $body.action = 'login'
              $body.format = 'json'
              $body.lgname = $username
              $body.lgpassword = $password
              $body.lgtoken = $object.login.token
      
              $object = Invoke-WebRequest $uri -Method Post -Body $body -WebSession $global:websession
              $json = $object.Content
              $object = ConvertFrom-Json $json
          }
          if($object.login.result -ne 'Success')
          {
              throw ('Login.result = ' + $object.login.result)
          }
      }
      
      function Invoke-Logout()
      {
          $uri = $protocol + $wiki + $api
          
          $body = @{}
          $body.action = 'logout'
          $body.format = 'json'
      
          $object = Invoke-WebRequest $uri -Method Get -Body $body -WebSession (Get-WebSession)
          
          Clear-Variables
      }
      
      function Clear-Variables()
      {
          if($csrftoken -ne $null)
          {
              Clear-Variable csrftoken -Scope Global
          }
          if($websession -ne $null)
          {
              Clear-Variable websession -Scope Global
          }
          if($wikiversion -ne $null)
          {
              Clear-Variable wikiversion -Scope Global
          }
      }
      
      function Get-WebSession()
      {
          if($websession -eq $null)
          {
              Invoke-LogIn $username $password
          }
          return $websession
      }
      
      function Get-CsrfToken()
      {
          if($csrftoken -eq $null)
          {
              $uri = $protocol + $wiki + $api
      
              $body = @{}
              $body.action = 'query'
              $body.format = 'json'
              $body.meta = 'tokens'
              $body.type = 'csrf'
      
              $object = Invoke-WebRequest $uri -Method Get -Body $body -WebSession (Get-WebSession)
              $json = $object.Content
              $object = ConvertFrom-Json $json
      
              $csrftoken = $object.query.tokens.csrftoken
          }
      
          return $csrftoken
      }
      
      function Get-Page($title)
      {
          $uri = $protocol + $wiki + 'index.php'
          
          $body = @{}
          $body.action = 'raw'
          $body.title = $title
      
          try
          {
              $object = Invoke-WebRequest $uri -Method Get -Body $body -WebSession (Get-WebSession)
              $result = $object.Content
          }
          catch [Net.WebException] 
          {
              if($error.Exception.ToString().IndexOf('404') -lt 0)
              {
                  throw('Unexpected message returned from Get-Page ' + $title + ': ' + $error.Exception.ToString())
                  exit
              }
              $result = ''
          }
          return $result
      }
      
      function Edit-Page($title, $text)
      {
          $uri = $protocol + $wiki + $api
          
          $body = @{}
          $body.action = 'edit'
          $body.bot = 1
          $body.title = $title
          $body.text = $text
          $body.token = Get-CsrfToken
          $body.format = 'json'
      
          $object = Invoke-WebRequest $uri -Method Post -Body $body -WebSession (Get-WebSession)
          $json = $object.Content
          $object = ConvertFrom-Json $json
      
          if($object.edit.result -ne 'Success')
          {
              throw('Error adding section:' + $object + ',' + $object.error)
      
          }
      }
      
      Edit-Page $wikiTitle (Get-QueryResultsTable $env:ADO_TOKEN $pastSessionQuery)
      
      Invoke-Logout
